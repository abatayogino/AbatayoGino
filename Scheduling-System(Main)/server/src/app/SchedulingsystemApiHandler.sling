import jk.http.client
import jk.http.worker

class is HTTPRPCRouter #webapi2:

model RiderregistrationRequest
{
    id as int
    firstname as string
    middlename as string
    lastname as string
    address as string
    age as string
    gender as string
    contactnumber as string
    username as string
    password as string

}

model RiderscheduleRequest
{
    id as int
    firstname as string
    middlename as string
    lastname as string
    date as string
    time as string

}

model RiderfeedbackRequest
{
    fullname as string
    message as string

}

model AdminloginRequest
{
    id as string
    username as string
    password as string

}
var db as SchedulingsystemDatabase
var cors = SchedulingsystemConfig.getCorsUtil()

func getRiderregistrationDatabase as SchedulingsystemDatabase
{
    if not db {
        db = SchedulingsystemDatabase.forContext(getCtx())
        db.updateRiderregistrationTables()
        
    }
    return db
}

func getRiderscheduleDatabase as SchedulingsystemDatabase
{
    if not db {
        db = SchedulingsystemDatabase.forContext(getCtx())
        db.updateRiderscheduleTables()
        
    }
    return db
}

func getRiderfeedbackDatabase as SchedulingsystemDatabase
{
    if not db {
        db = SchedulingsystemDatabase.forContext(getCtx())
        db.updateRiderfeedbackTables()
        
    }
    return db
}

func getAdminloginDatabase as SchedulingsystemDatabase
{
    if not db {
        db = SchedulingsystemDatabase.forContext(getCtx())
        db.updateAdminloginTables()
        
    }
    return db
}

func postProcess(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) override:
cors.handleWorkerRequest(req, resp)

// # Riderregistration
// # this is just a comment line
// #

GET "/riderregistration"
{
    var riderregistration = assert getRiderregistrationDatabase().getRiderregistration()
    sendOk riderregistration
}

POST "/riderregistration"
{
    var requestData = assert RiderregistrationRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var riderregistration = new SchedulingsystemDatabase.Riderregistration()
    riderregistration.setId(requestData.getId())
    riderregistration.setFirstname(requestData.getFirstname())
    riderregistration.setMiddlename(requestData.getMiddlename())
    riderregistration.setLastname(requestData.getLastname())
    riderregistration.setAddress(requestData.getAddress())
    riderregistration.setAge(requestData.getAge())
    riderregistration.setGender(requestData.getGender())
    riderregistration.setContactnumber(requestData.getContactnumber())
    riderregistration.setUsername(requestData.getUsername())
    riderregistration.setPassword(requestData.getPassword())
      
    assert getRiderregistrationDatabase().addRiderregistration(riderregistration):
        sendError "failedToSaveRiderregistration"
    sendOk
}

// RIDERSCHEDULE
//
GET "/riderschedule"
{
    var riderschedule = assert getRiderscheduleDatabase().getRiderschedule()
    sendOk riderschedule
}

POST "/riderschedule"
{
    var requestData = assert RiderscheduleRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var riderschedule = new SchedulingsystemDatabase.Riderschedule()
    riderschedule.setId(requestData.getId())
    riderschedule.setFirstname(requestData.getFirstname())
    riderschedule.setMiddlename(requestData.getMiddlename())
    riderschedule.setLastname(requestData.getLastname())
    riderschedule.setDate(requestData.getDate())
    riderschedule.setTime(requestData.getTime())
    
    assert getRiderscheduleDatabase().addRiderschedule(riderschedule):
        sendError "failedToSaveRidersschedule"
    sendOk
}

// # riderfeedback
// # this is just a comment line
// #

GET "/riderfeedback"
{
    var riderfeedback = assert getRiderfeedbackDatabase().getRiderfeedback()
    sendOk riderfeedback
}

POST "/riderfeedback"
{
    var requestData = assert RiderfeedbackRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var riderfeedback = new SchedulingsystemDatabase.Riderfeedback()
    riderfeedback.setFullname(requestData.getFullname())
    riderfeedback.setMessage(requestData.getMessage())
    
    assert getRiderfeedbackDatabase().addRiderfeedback(riderfeedback):
        sendError "failedToSaveFeedback"
    sendOk
}

// adminlogin
//
GET "/adminlogin"
{
    var adminlogin = assert getAdminloginDatabase().getAdminlogin()
    sendOk adminlogin
}
